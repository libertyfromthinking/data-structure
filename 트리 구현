트리
1. 순차적이지 않은 비선형 자료구조
2. 연산 수식, 조직도, heap 등을 표현하기에 적합함


이진탐색트리 
1. 자식이 0~2개
2. 각 노드마다 왼쪽자식포인터, 값, 오른쪽자식포인터로 구성(Doublely Linked List와 비슷) 
3. 좌측은 현재 노드의 값보다 작거나 같으며 우측은 현재값보다 큼.
4. 좌측이나 우측의 노드는 각각이 이진탐색트리임.

트리 순회
1. 순회란 트리 구조에서 각각의 노드를 정확히 한번만 체계적인 방법으로 방문하는 과정, 모든 트리에서 일반화 가능
2. 비선형적인 자료구조이므로 여러가지의 순회방법이 존재함(전위, 중위, 후위, 레벨 등..).
3. 전위, 중위, 후위 순회는 재귀적으로 사용 가능하므로 스택을 사용하고 레벨 순회는 큐를 사용함.

순회 종류
1. 전위순회(Preorder Traversal) : current -> left -> right
2. 중위순회(Inorder Traversal) : left -> current -> right
3. 후위순회(Postorder Traversal) : left -> right -> current
4. 레벨순회 : 레벨별로 좌->우로 순회, 큐를 이용함

이진탐색트리 소스코드
class Node(object):
    def __init__(self, data):
        self.data = data
        self.left = self.right = None

class BinarySearchTree(object):
    def __init__(self):
        self.root = None

    ## 삽입
    def insert(self, data):
        self.root = self._insert_value(self.root, data)
        return self.root is not None

    def _insert_value(self, node, data):
        if node is None:
            node = Node(data)
        else:
            if data <= node.data:
                node.left = self._insert_value(node.left, data)
            else:
                node.right = self._insert_value(node.right, data)
        return node

    ## 탐색
    def find(self, key):
        return self._find_value(self.root, key)

    def _find_value(self, root, key):
        if root is None or root.data == key:
            return root is not None
        elif key < root.data:
            return self._find_value(root.left, key)
        else:
            return self._find_value(root.right, key)
    
    ## 삭제
    def delete(self, key):
        self.root, deleted = self._delete_value(self.root, key)
        return deleted

    def _delete_value(self, node, key):
        if node is None:
            return node, False

        deleted = False
        if key == node.data:
            deleted = True
            if node.left and node.right:
                # replace the node to the leftmost of node.right
                parent, child = node, node.right
                while child.left is not None:
                    parent, child = child, child.left
                child.left = node.left
                if parent != node:
                    parent.left = child.right
                    child.right = node.right
                node = child
            elif node.left or node.right:
                node = node.left or node.right
            else:
                node = None
        elif key < node.data:
            node.left, deleted = self._delete_value(node.left, key)
        else:
            node.right, deleted = self._delete_value(node.right, key)
        return node, deleted
	
	## 전위순회
    def preorderTraversal(self, node):
        print(node, end=' ')
        if not node.left  == None : self.preorderTraversal(node.left)
        if not node.right == None : self.preorderTraversal(node.right)

	## 중위순회
    def inorderTraversal(self, node):
        if not node.left  == None : self.inorderTraversal(node.left)
        print(node, end=' ')
        if not node.right == None : self.inorderTraversal(node.right)
    
	## 후위순회
    def postorderTraversal(self, node):
        if not node.left  == None : self.postorderTraversal(node.left)
        if not node.right == None : self.postorderTraversal(node.right)
        print(node, end=' ')
    
	## 레벨순회
    def level_order_traversal(self):
        def _level_order_traversal(root):
            queue = [root]
            while queue:
                root = queue.pop(0)
                if root is not None:
                    print(root.data)
                    if root.left:
                        queue.append(root.left)
                    if root.right:
                        queue.append(root.right)
        _level_order_traversal(self.root)



